# Source of configuration for Tkrzw RPC

#================================================================
# Generic Settings
#================================================================

# Package name
AC_INIT([tkrzw-rpc], [0.6.0])

# Package information
MYLIBVER=1
MYLIBREV=2
MYLIBFMT=0

# Targets
MYHEADERFILES="tkrzw_dbm_remote.h"
MYLIBRARYFILES="libtkrzw_rpc.a"
MYLIBOBJFILES="tkrzw_rpc_common.o tkrzw_dbm_remote.o tkrzw_rpc.pb.o tkrzw_rpc.grpc.pb.o"
MYCOMMANDFILES="tkrzw_rpc_build_util tkrzw_server tkrzw_dbm_remote_util tkrzw_dbm_remote_perf"
MYDATAFILES="tkrzw_rpc.proto"
MYTESTFILES="tkrzw_server_test tkrzw_dbm_remote_test"
MYPCFILES="tkrzw-rpc.pc"

# Building flags
MYCXXFLAGS="-std=c++17 -Wall -fPIC -fsigned-char -O2"
MYCPPFLAGS="-I. -I\$(INCLUDEDIR) -I$HOME/include -I/usr/local/include -DNDEBUG"
MYLDSOFLAGS="-shared -Wl,-soname,libtkrzw_rpc.so.\$(LIBVER)"
MYLDFLAGS="-L. -L\$(LIBDIR) -L$HOME/lib -L/usr/local/lib"
MYCMDLDFLAGS="-L. -L\$(LIBDIR)"
MYCMDLIBS="-ltkrzw_rpc"
MYTESTLIBS="-lgtest -lgmock -lpthread"
MYLDLIBPATH=""
MYLDLIBPATHENV="LD_LIBRARY_PATH"

# Building paths
pathtmp="$PATH"
PATH="$HOME/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"
PATH="$PATH:/usr/ccs/bin:/usr/ucb:/usr/xpg4/bin:/usr/xpg6/bin:$pathtmp"
LIBRARY_PATH="$HOME/lib:/usr/local/lib:$LIBRARY_PATH"
if test -z "$LD_LIBRARY_PATH" -a -n "$DYLD_LIBRARY_PATH"
then
  LD_LIBRARY_PATH="$DYLD_LIBRARY_PATH"
fi
LD_LIBRARY_PATH="$HOME/lib:/usr/local/lib:$LD_LIBRARY_PATH"
CPATH="$HOME/include:/usr/local/include:$CPATH"
PKG_CONFIG_PATH="$HOME/lib/pkgconfig:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
export PATH LIBRARY_PATH LD_LIBRARY_PATH CPATH PKG_CONFIG_PATH
if type pkg-config >config.tmp 2>&1
then
  PATH="$PATH:`pkg-config --variable=bindir tkrzw`"
  LIBRARY_PATH="$LIBRARY_PATH:`pkg-config --variable=libdir tkrzw`"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:`pkg-config --variable=libdir tkrzw`"
  CPATH="$CPATH:`pkg-config --variable=includedir tkrzw`"
  export PATH LIBRARY_PATH LD_LIBRARY_PATH CPATH PKG_CONFIG_PATH
fi

# Specify the installation prefix of extra packages
AC_ARG_WITH(extra,
  AS_HELP_STRING([--with-extra=DIR], [search DIR/include and DIR/lib for extra packages]))
if test -n "$with_extra"
then
  MYCPPFLAGS="$MYCPPFLAGS -I$with_extra/include"
  MYLDFLAGS="$MYLDFLAGS -L$with_extra/lib"
  CPATH="$CPATH:$with_extra/include"
  LIBRARY_PATH="$LIBRARY_PATH:$with_extra/lib"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$with_extra/lib"
  PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$with_extra/lib/pkgconfig"
  PATH="$with_extra/bin:$PATH"
fi

#================================================================
# Options
#================================================================

# Internal variables
enables=""

# Development mode
AC_ARG_ENABLE(devel,
  AS_HELP_STRING([--enable-devel], [build for development]))
if test "$enable_devel" = "yes"
then
  MYCXXFLAGS="-std=c++17 -pthread -Wall -fPIC -fsigned-char -g0 -O2"
  MYCPPFLAGS="$MYCPPFLAGS -I/usr/local/include"
  MYLDFLAGS="$MYLDFLAGS -L/usr/local/lib"
  MYCMDLDFLAGS="$MYCMDLDFLAGS -L/usr/local/lib"
  enables="$enables (devel)"
fi

# Debug mode
AC_ARG_ENABLE(debug,
  AS_HELP_STRING([--enable-debug], [build for debugging]))
if test "$enable_debug" = "yes"
then
  MYCXXFLAGS="-std=c++17 -Wall -Wextra -Wno-unused-parameter -fPIC -fsigned-char -g -O0"
  MYCPPFLAGS="$MYCPPFLAGS -UNDEBUG -D_TKRZW_DEBUG"
  MYCPPFLAGS="$MYCPPFLAGS -I/usr/local/include"
  MYLDFLAGS="$MYLDFLAGS -L/usr/local/lib"
  MYCMDLDFLAGS="$MYCMDLDFLAGS -L/usr/local/lib"
  enables="$enables (debug)"
fi

# Profiling mode
AC_ARG_ENABLE(profile,
  AS_HELP_STRING([--enable-profile], [build for profiling]))
if test "$enable_profile" = "yes"
then
  MYCXXFLAGS="-std=c++17 -Wall -fPIC -fsigned-char -g -pg -O2 -fno-inline"
  MYCPPFLAGS="$MYCPPFLAGS -I/usr/local/include"
  MYLDFLAGS="$MYLDFLAGS -L/usr/local/lib"
  MYCMDLDFLAGS="$MYCMDLDFLAGS -L/usr/local/lib"
  enables="$enables (profile)"
fi

# Optimize for the native architecture
AC_ARG_ENABLE(opt-native,
  AS_HELP_STRING([--enable-opt-native], [build with optimization for the native architecture]))
if test "$enable_opt_native" = "yes"
then
  if uname | grep Darwin >config.tmp && uname -m | grep arm64 >config.tmp
  then
    MYCXXFLAGS="$MYCXXFLAGS -O3 -mcpu=native"
  else
    MYCXXFLAGS="$MYCXXFLAGS -O3 -march=native"
  fi
  enables="$enables (opt-native)"
fi

# Messages
printf '#================================================================\n'
printf '# Configuring Tkrzw-RPC version %s%s.\n' "$PACKAGE_VERSION" "$enables"
printf '#================================================================\n'

#================================================================
# Checking Commands and Libraries
#================================================================

# Protobuf compiler
printf 'checking protoc... '
PROTOC=`which protoc`
if test -x "$PROTOC"
then
  printf '%s\n' "$PROTOC"
else
  printf 'no\n'
  printf '#================================================================\n' 1>&2
  printf '# WARNING: protc is not found.\n' 1>&2
  printf '#================================================================\n' 1>&2
fi

# gRPC plugin
printf 'checking grpc_cpp_plugin... '
GRPCCPP=`which grpc_cpp_plugin`
if test -x "$GRPCCPP"
then
  printf '%s\n' "$GRPCCPP"
else
  printf 'no\n'
  printf '#================================================================\n' 1>&2
  printf '# WARNING: grpc_cpp_plugin is not found.\n' 1>&2
  printf '#================================================================\n' 1>&2
fi

# C compiler
AC_PROG_CC
AC_PROG_CXX
AC_LANG(C++)

# Reset variables
if test "$GCC" != "yes"
then
  AC_MSG_WARN([another compiler except for GCC was detected])
  MYCXXFLAGS=""
fi
test -n "$CXXFLAGS" && MYCXXFLAGS="$CXXFLAGS $MYCXXFLAGS"
test -n "$CPPFLAGS" && MYCPPFLAGS="$CPPFLAGS $MYCPPFLAGS"
test -n "$LDFLAGS" && MYLDFLAGS="$LDFLAGS $MYLDFLAGS"

# Underlying libraries
AC_CHECK_LIB(c, main)
AC_CHECK_LIB(m, main)
AC_CHECK_LIB(pthread, main)
AC_CHECK_LIB(rt, main)
AC_CHECK_LIB(stdc++, main)
AC_CHECK_LIB(z, main)
AC_CHECK_LIB(zstd, main)
AC_CHECK_LIB(lz4, main)
AC_CHECK_LIB(lzma, main)
AC_CHECK_LIB(tkrzw, main)
AC_CHECK_LIB(protobuf, main)
AC_CHECK_LIB(grpc, main)
AC_CHECK_LIB(grpc++, main)
AC_CHECK_LIB(grpc++_reflection, main)
AC_CHECK_LIB(tkrzw_rpc, main, AC_MSG_WARN([old version of Tkrzw-RPC was detected])) 
MYLDLIBPATH="$LD_LIBRARY_PATH"

# Necessary headers
AC_CHECK_HEADER(stdlib.h, true, AC_MSG_ERROR([stdlib.h is required]))
AC_CHECK_HEADER(stdint.h, true, AC_MSG_ERROR([stdint.h is required]))
AC_CHECK_HEADER(tkrzw_langc.h, true, AC_MSG_ERROR([tkrzw_langc.h is required]))
AC_CHECK_HEADER(tkrzw_langc.h, true, AC_MSG_ERROR([tkrzw_langc.h is required]))
AC_CHECK_HEADER(grpc/grpc.h, true, AC_MSG_ERROR([grpc/grpc.h is required]))

# Checking the version of Tkrzw with pkg-config
if type pkg-config >config.tmp 2>&1
then
  printf 'checking Tkrzw by pkg-config... '
  if pkg-config --atleast-version=1.0.2 tkrzw
  then
    MYCPPFLAGS="$MYCPPFLAGS -I`pkg-config --variable=includedir tkrzw`"
    MYLDFLAGS="$MYLDFLAGS -L`pkg-config --variable=libdir tkrzw`"
    MYRUNPATH="$MYRUNPATH:`pkg-config --variable=libdir tkrzw`"
    printf 'yes\n'
  else
    printf 'no\n'
    AC_MSG_ERROR([required version of Tkrzw was not detected])
  fi
fi

# As-needed linking
if uname | grep Linux >config.tmp
then
  MYLDFLAGS="$MYLDFLAGS -Wl,-rpath-link,.:/usr/local/lib:$MYLDLIBPATH"
  MYLDFLAGS="$MYLDFLAGS -Wl,--as-needed"
fi
if uname -a | grep -i 'SunOS' >config.tmp
then
  MYLDSOFLAGS="-shared -Wl,-soname,libtkrzw_rpc.so.\$(LIBVER)"
fi

# Shared libraries
if test "$enable_shared" != "no" && test "$enable_profile" != "yes"
then
  if uname | grep Darwin >config.tmp
  then
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw_rpc.$MYLIBVER.$MYLIBREV.$MYLIBFMT.dylib"
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw_rpc.$MYLIBVER.dylib"
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw_rpc.dylib"
    MYCPPFLAGS="$MYCPPFLAGS -D_DARWIN_C_SOURCE"
    MYLDLIBPATHENV="DYLD_LIBRARY_PATH"
  else
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw_rpc.so.$MYLIBVER.$MYLIBREV.$MYLIBFMT"
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw_rpc.so.$MYLIBVER"
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw_rpc.so"
  fi
fi

#================================================================
# Generic Settings
#================================================================

# Export variables
AC_SUBST(PROTOC)
AC_SUBST(GRPCCPP)
AC_SUBST(MYLIBVER)
AC_SUBST(MYLIBREV)
AC_SUBST(MYLIBFMT)
AC_SUBST(MYHEADERFILES)
AC_SUBST(MYLIBRARYFILES)
AC_SUBST(MYLIBOBJFILES)
AC_SUBST(MYCOMMANDFILES)
AC_SUBST(MYDATAFILES)
AC_SUBST(MYTESTFILES)
AC_SUBST(MYPCFILES)
AC_SUBST(MYCXXFLAGS)
AC_SUBST(MYCPPFLAGS)
AC_SUBST(MYLDSOFLAGS)
AC_SUBST(MYLDFLAGS)
AC_SUBST(MYCMDLDFLAGS)
AC_SUBST(MYCMDLIBS)
AC_SUBST(MYTESTLIBS)
AC_SUBST(MYLDLIBPATH)
AC_SUBST(MYLDLIBPATHENV)

# Targets
AC_CONFIG_FILES([Makefile tkrzw-rpc.pc])
AC_OUTPUT

# Messages
printf '#================================================================\n'
printf '# Ready to make.\n'
printf '#================================================================\n'

# END OF FILE
