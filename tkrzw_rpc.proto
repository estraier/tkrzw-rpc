// Service definition of Tkrzw-RPC
//
// Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
// except in compliance with the License.  You may obtain a copy of the License at
//     https://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software distributed under the
// License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied.  See the License for the specific language governing permissions
// and limitations under the License.

syntax = "proto3";

package tkrzw_rpc;

// Status data corresponding to the Status class.
message StatusProto {
  // The message code.
  int32 code = 1;
  // The additional status message.
  string message = 2;
}

// Generic key-value pair of strings.
message StringPair {
  // The first value, aka. record key.
  string first = 1;
  // The second value aka. record value.
  string second = 2;
}

// Generic key-value pair of byte arrays.
message BytesPair {
  // The first value, aka. record key.
  bytes first = 1;
  // The second value aka. record value.
  bytes second = 2;
}

// Record existence and value.
message RecordState {
  // Whether the record exists.
  bool existence = 1;
  // The key.
  bytes key = 2;
  // The value.
  bytes value = 3;
  // True to accept any value.
  bool any_value = 4;
}

// Request of the Echo method.
message EchoRequest {
  // The message.
  string message = 1;
}

// Response of the Echo method.
message EchoResponse {
  // The result status.
  StatusProto status = 1;
  // The echo message.
  string echo = 2;
}

// Request of the Inspect method.
message InspectRequest {
  // The index of the DBM object.  The origin is 0.
  // If it is negative, metadata of the server is retrieved.
  int32 dbm_index = 1;
}

// Response of the Inspect method.
message InspectResponse {
  // The result status.
  StatusProto status = 1;
  // Key-value pairs of the attributes.
  repeated StringPair records = 2;
}

// Request of the Get method.
message GetRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The key of the record.
  bytes key = 2;
  // Whether to omit the value in the response.
  bool omit_value = 3;
}

// Response of the Get method.
message GetResponse {
  // The result status.
  StatusProto status = 1;
  // The value of the record.
  bytes value = 2;
}

// Request of the GetMulti method.
message GetMultiRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The keys of records.
  repeated bytes keys = 2;
}

// Response of the GetMulti method.
message GetMultiResponse {
  // The result status.
  StatusProto status = 1;
  // Retrieved records.
  repeated BytesPair records = 2;
}

// Request of the Set method.
message SetRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The key of the record.
  bytes key = 2;
  // The value of the record.
  bytes value = 3;
  // True to overwrite the existing record.
  bool overwrite = 4;
}

// Response of the Set method.
message SetResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the SetMulti method.
message SetMultiRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // Records to store.
  repeated BytesPair records = 2;
  // True to overwrite the existing record.
  bool overwrite = 3;
}

// Response of the SetMulti method.
message SetMultiResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the Remove method.
message RemoveRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The key of the record.
  bytes key = 2;
}

// Response of the Remove method.
message RemoveResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the RemoveMulti method.
message RemoveMultiRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The keys of records.
  repeated bytes keys = 2;
}

// Response of the RemoveMulti method.
message RemoveMultiResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the Append method.
message AppendRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The key of the record.
  bytes key = 2;
  // The value of the record.
  bytes value = 3;
  // The delimiter to put after the existing record.
  bytes delim = 4;
}

// Response of the Append method.
message AppendResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the AppendMulti method.
message AppendMultiRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // Records to store.
  repeated BytesPair records = 2;
  // The delimiter to put after the existing record.
  bytes delim = 3;
}

// Response of the AppendMulti method.
message AppendMultiResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the CompareExchange method.
message CompareExchangeRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The key of the record.
  bytes key = 2;
  // Whether the record is expected to exist.
  bool expected_existence = 3;
  // The expected value.
  bytes expected_value = 4;
  // True to expect any value.
  bool expect_any_value = 5;
  // Whether the record is desired to exists.
  bool desired_existence = 6;
  // The desired value.
  bytes desired_value = 7;
  // True to do no update.
  bool desire_no_update = 8;
  // True to get the actual value of the existing record.
  bool get_actual = 9;
}

// Response of the CompareExchange method.
message CompareExchangeResponse {
  // The result status.
  StatusProto status = 1;
  // The actual value of the existing record.
  bytes actual = 2;
  // Whether there is an existing record.
  bool found = 3;
}

// Request of the Increment method.
message IncrementRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The key of the record.
  bytes key = 2;
  // The incremental value.
  int64 increment = 3;
  // The initial value.
  int64 initial = 4;
}

// Response of the Increment method.
message IncrementResponse {
  // The result status.
  StatusProto status = 1;
  // The current value.
  int64 current = 2;
}

// Request of the CompareExchangeMulti method.
message CompareExchangeMultiRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // Expected record states.
  repeated RecordState expected = 2;
  // Desired record states.
  repeated RecordState desired = 3;
}

// Response of the CompareExchangeMulti method.
message CompareExchangeMultiResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the Rekey method.
message RekeyRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The old key of the record.
  bytes old_key = 2;
  // The new key of the record.
  bytes new_key = 3;
  // Whether to overwrite the existing record.
  bool overwrite = 4;
  // Whether to retain the record of the old key.
  bool copying = 5;
}

// Response of the Rekey method.
message RekeyResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the PopFirst method.
message PopFirstRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // Whether to omit the key in the response.
  bool omit_key = 2;
  // Whether to omit the value in the response.
  bool omit_value = 3;
  // The wait time in seconds before retrying.
  double retry_wait = 4;
}

// Response of the PopFirst method.
message PopFirstResponse {
  // The result status.
  StatusProto status = 1;
  // The key of the record.
  bytes key = 2;
  // The value of the record.
  bytes value = 3;
}

// Request of the PushLast method.
message PushLastRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The value of the record.
  bytes value = 2;
  // The current wall time used to generate the key.
  double wtime = 3;
  // If true, notification signal is sent.
  bool notify = 4;
}

// Response of the PushLast method.
message PushLastResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the Count method.
message CountRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
}

// Response of the Count method.
message CountResponse {
  // The result status.
  StatusProto status = 1;
  // The number of records.
  int64 count = 2;
}

// Request of the GetFileSize method.
message GetFileSizeRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
}

// Response of the GetFileSize method.
message GetFileSizeResponse {
  // The result status.
  StatusProto status = 1;
  // The current file size.
  int64 file_size = 2;
}

// Request of the Clear method.
message ClearRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
}

// Response of the Clear method.
message ClearResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the Rebuild method.
message RebuildRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // Optional parameters.
  repeated StringPair params = 2;
}

// Response of the Rebuild method.
message RebuildResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the ShouldBeRebuilt method.
message ShouldBeRebuiltRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
}

// Response of the ShouldBeRebuilt method.
message ShouldBeRebuiltResponse {
  // The result status.
  StatusProto status = 1;
  // Whether to be rebuilt.
  bool tobe = 2;
}

// Request of the Synchronize method.
message SynchronizeRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // Whether to do physical synchronization.
  bool hard = 2;
  // Optional parameters.
  repeated StringPair params = 3;
}

// Response of the Synchronize method.
message SynchronizeResponse {
  // The result status.
  StatusProto status = 1;
}

// Request of the Search method.
message SearchRequest {
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The search mode.
  string mode = 2;
  // The pattern for matching.
  bytes pattern = 3;
  // The maximum records to obtain.
  int32 capacity = 4;
}

// Response of the Search method.
message SearchResponse {
  // The result status.
  StatusProto status = 1;
  // A list of matched keys.
  repeated bytes matched = 2;
}

// Request of the Stream method.
message StreamRequest {
  // For each stream operation.
  oneof request_oneof {
    EchoRequest echo_request = 1;
    GetRequest get_request = 2;
    SetRequest set_request = 3;
    RemoveRequest remove_request = 4;
    AppendRequest append_request = 5;
    CompareExchangeRequest compare_exchange_request = 6;
    IncrementRequest increment_request = 7;
  }
  // If true, the response is omitted.
  bool omit_response = 101;
}

// Response of the Stream method.
message StreamResponse {
  oneof response_oneof {
    EchoResponse echo_response = 1;
    GetResponse get_response = 2;
    SetResponse set_response = 3;
    RemoveResponse remove_response = 4;
    AppendResponse append_response = 5;
    CompareExchangeResponse compare_exchange_response = 6;
    IncrementResponse increment_response = 7;
  }
}

// Request of the Iterate method.
message IterateRequest {
  // Enumeration for operations.
  enum OpType {
    // No operation.
    OP_NONE = 0;
    // Jumps to the first record.
    OP_FIRST = 1;
    // Jumps to the last record.
    OP_LAST = 2;
    // Jumps to a record of the key.
    OP_JUMP = 3;
    // Jumps to the last record lower than the key.
    OP_JUMP_LOWER = 4;
    // Jumps to the last record upper than the key.
    OP_JUMP_UPPER = 5;
    // Moves to the next record.
    OP_NEXT = 6;
    // Moves to the previous record.
    OP_PREVIOUS = 7;
    // Gets the current record.
    OP_GET = 8;
    // Sets the current record value.
    OP_SET = 9;
    // Removes the current record.
    OP_REMOVE = 10;
    // Gets the current record and moves the iterator.
    OP_STEP = 11;
  }
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 1;
  // The jump operation.
  OpType operation = 2;
  // The key of the operation.
  bytes key = 3;
  // The value of the operation.
  bytes value = 4;
  // Whether the jump condition is inclusive.
  bool jump_inclusive = 5;
  // Whether to omit the key in the response.
  bool omit_key = 6;
  // Whether to omit the value in the response.
  bool omit_value = 7;
}

// Response of the Iterate method.
message IterateResponse {
  // The result status.
  StatusProto status = 1;
  // The key of the record.
  bytes key = 2;
  // The value of the record.
  bytes value = 3;
}

// Request of the Replicate method.
message ReplicateRequest {
  // The minimum timestamp of update logs to retrieve.
  int64 min_timestamp = 1;
  // The server ID of the client.
  int32 server_id = 2;
  // The time in seconds to wait for the next log.
  double wait_time = 3;
}

// Response of the Replicate method.
// The first response is OP_NOOP and provides the server ID of the server.
message ReplicateResponse {
  // Enumeration for operations.
  enum OpType {
    // No operation.
    OP_NOOP = 0;
    // To modify or add a record.
    OP_SET = 1;
    // To remove a record.
    OP_REMOVE = 2;
    // To remove all records.
    OP_CLEAR = 3;
  }
  // The result status.
  StatusProto status = 1;
  // The timestamp of the update.
  int64 timestamp = 2;
  // The server ID of the client.  
  int32 server_id = 3;
  // The index of the DBM object.  The origin is 0.
  int32 dbm_index = 4;
  // The operation type.
  OpType op_type = 5;
  // The record key.
  bytes key = 6;
  // The record value.
  bytes value = 7;
}

// Request of the ChangeMaster method.
message ChangeMasterRequest {
  // The address of the master of replication.
  string master = 1;
  // The skew of the timestamp.
  int64 timestamp_skew = 2;
}

// Response of the ChangeMaster method.
message ChangeMasterResponse {
  // The result status.
  StatusProto status = 1;
}

// Definition of the database service.
service DBMService {
  rpc Echo(EchoRequest) returns (EchoResponse);
  rpc Inspect(InspectRequest) returns (InspectResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc GetMulti(GetMultiRequest) returns (GetMultiResponse);
  rpc Set(SetRequest) returns (SetResponse);
  rpc SetMulti(SetMultiRequest) returns (SetMultiResponse);
  rpc Remove(RemoveRequest) returns (RemoveResponse);
  rpc RemoveMulti(RemoveMultiRequest) returns (RemoveMultiResponse);
  rpc Append(AppendRequest) returns (AppendResponse);
  rpc AppendMulti(AppendMultiRequest) returns (AppendMultiResponse);
  rpc CompareExchange(CompareExchangeRequest) returns (CompareExchangeResponse);
  rpc Increment(IncrementRequest) returns (IncrementResponse);
  rpc CompareExchangeMulti(CompareExchangeMultiRequest) returns (CompareExchangeMultiResponse);
  rpc Rekey(RekeyRequest) returns (RekeyResponse);
  rpc PopFirst(PopFirstRequest) returns (PopFirstResponse);
  rpc PushLast(PushLastRequest) returns (PushLastResponse);
  rpc Count(CountRequest) returns (CountResponse);
  rpc GetFileSize(GetFileSizeRequest) returns (GetFileSizeResponse);
  rpc Clear(ClearRequest) returns (ClearResponse);
  rpc Rebuild(RebuildRequest) returns (RebuildResponse);
  rpc ShouldBeRebuilt(ShouldBeRebuiltRequest) returns (ShouldBeRebuiltResponse);
  rpc Synchronize(SynchronizeRequest) returns (SynchronizeResponse);
  rpc Search(SearchRequest) returns (SearchResponse);
  rpc Stream(stream StreamRequest) returns (stream StreamResponse);
  rpc Iterate(stream IterateRequest) returns (stream IterateResponse);
  rpc Replicate(ReplicateRequest) returns (stream ReplicateResponse);
  rpc ChangeMaster(ChangeMasterRequest) returns (ChangeMasterResponse);
}
